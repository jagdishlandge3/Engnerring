#include<iostream>
#include<stdlib.h>

using namespace std;

struct node
{
    int data;
    node *left,*right;
}*root;

class BST
{
    public:
        void find(int, node **, node **);    
		int search(node *, int );
        void insert(node *,node *);
        void del(int);
        void case_a(node *,node *);
        void case_b(node *,node *);
        void case_c(node *,node *);
        void preorder(node *);
        void inorder(node *);
        void postorder(node *);
        void display(node *, int);

		BST()
        {
            root = NULL;
        }
};

/* Main Contains Menu */
int main()
{
    int choice, num;
    BST bst;
	node *temp;

    while (1)
    {
        cout<<"\n\n\t-----------------";
        cout<<"\n\n\tOperations on BST";
        cout<<"\n\n\t-----------------";

        cout<<"\n\t1.Insert Element\n\t2.Delete Element\n\t3.Search\n\t4.Inorder Traversal\n\t4.Preorder Traversal\n\t6.Postorder Traversal\n\t7.Display\n\t8.Quit\n\n\tEnter your choice : ";
        cin>>choice;

        switch(choice)
        {
			case 1:
						temp = new node;
						cout<<"\n\n\tEnter the number to be inserted : ";
					    cin>>temp->data;
						bst.insert(root, temp);
						break;
			case 2:
						if (root == NULL)
						{
			               cout<<"\n\n\tTree is empty, nothing to delete";
			               continue;
						}
						cout<<"\n\n\tEnter the number to be deleted : ";
						cin>>num;
			            bst.del(num);
						break;
			case 3:
						cout<<"\n\nEnter the no to serached:";
						cin>>num;
						bst.search(root,num);
			case 4:
						cout<<"\n\n\tInorder Traversal of BST:";
			            bst.inorder(root);
			            break;
			case 5:
			            cout<<"\n\n\tPreorder Traversal of BST:";
						bst.preorder(root);
			            break;
			case 6:
			            cout<<"\n\n\tPostorder Traversal of BST:";
			            bst.postorder(root);
			            break;
	        case 7:
			            cout<<"\n\n\tDisplay BST:";
						bst.display(root,1);
			            break;
	        case 8:
			            exit(1);
	        default:
			            cout<<"\n\tInvalid choice";
        }
    }
}

/* Find Element in the Tree */

void BST::find(int item, node **par, node **loc)
{
	node *ptr, *ptrsave;

    if (root == NULL)
    {
        *loc = NULL;
        *par = NULL;

        return;
    }

    if (item == root->data)
    {
        *loc = root;
        *par = NULL;
        return;
    }

    if (item < root->data)
        ptr = root->left;
    else
        ptr = root->right;

    ptrsave = root;

    while (ptr != NULL)
    {
        if (item == ptr->data)
        {
            *loc = ptr;
            *par = ptrsave;

			return;
        }
        ptrsave = ptr;

        if (item < ptr->data)
            ptr = ptr->left;
		else
		    ptr = ptr->right;
    }

    *loc = NULL;
    *par = ptrsave;
}

int BST::Search(node *tree , int n)
{
	int Flag=0;
	
	while(tree!=NULL)
	{
		if(strcmp(n,tree->data)>0)
			tree=tree->right;
		else if(strcmp(n,tree->data)<0)
			tree=tree->left;
		else
		{
			Flag=1;
			break;
		}
	}
	return Flag;
}

/* Inserting Element into the Tree */
void BST::insert(node *tree, node *newnode)
{
    if (root == NULL)
    {
        root = new node;
        root->data = newnode->data;
        root->left = NULL;
        root->right = NULL;

        cout<<"\n\tRoot Node is Added \n";
        return;
    }

    if (tree->data == newnode->data)
    {
        cout<<"\n\n\tElement already in the tree";
        return;
    }

    if (tree->data > newnode->data)
    {
        if (tree->left != NULL)
            insert(tree->left, newnode);	
		else
		{
            tree->left = newnode;
            (tree->left)->left = NULL;
            (tree->left)->right = NULL;

            cout<<"\n\n\tNode Added To Left";
            return;
        }
    }
    else
    {
        if (tree->right != NULL)
            insert(tree->right, newnode);
        else
        {
            tree->right = newnode;
            (tree->right)->left = NULL;
            (tree->right)->right = NULL;

			cout<<"\n\n\tNode Added To Right"<<endl;
            return;
        }	
    }
}

/* Delete Element from the tree */
void BST::del(int item)
{
    node *parent, *location;

    if (root == NULL)
    {
        cout<<"\n\n\tTree empty";
        return;
    }
    find(item, &parent, &location);

    if (location == NULL)
    {
        cout<<"\n\n\tItem not present in tree";
        return;
    }

    if (location->left == NULL && location->right == NULL)
        case_a(parent, location);

    if (location->left != NULL && location->right == NULL)
        case_b(parent, location);

    if (location->left == NULL && location->right != NULL)
        case_b(parent, location);

    if (location->left != NULL && location->right != NULL)
        case_c(parent, location);

    free(location);
}

/* Case A*/
void BST::case_a(node *par, node *loc )
{
    if (par == NULL)
        root = NULL;
    else
    {
        if (loc == par->left)
            par->left = NULL;
       else
            par->right = NULL;
    }
}

/*Case B */
void BST::case_b(node *par, node *loc)
{
    node *child;

    if (loc->left != NULL)
        child = loc->left;
    else
        child = loc->right;

    if (par == NULL)
        root = child;
    else
    {
        if (loc == par->left)
            par->left = child;
        else
            par->right = child;
    }
}

/* Case C */
void BST::case_c(node *par, node *loc)
{
    node *ptr, *ptrsave, *suc, *parsuc;
    ptrsave = loc;
    ptr = loc->right;

    while (ptr->left != NULL)
    {
        ptrsave = ptr;
        ptr = ptr->left;
    }
    suc = ptr;
    parsuc = ptrsave;

    if (suc->left == NULL && suc->right == NULL)
        case_a(parsuc, suc);
    else
        case_b(parsuc, suc);

	if (par == NULL)
        root = suc;
    else
    {
        if (loc == par->left)
            par->left = suc;
        else
            par->right = suc;
    }
    suc->left = loc->left;
    suc->right = loc->right;
}

/*Pre Order Traversal*/
void BST::preorder(node *ptr)
{
    if (root == NULL)
    {
        cout<<"\n\n\tTree is empty";
        return;
    }

    if (ptr != NULL)
    {
        cout<<ptr->data<<"  ";
        preorder(ptr->left);
        preorder(ptr->right);
    }
}

/* In Order Traversal */
void BST::inorder(node *ptr)
{
    if (root == NULL)
    {
        cout<<"\n\n\tTree is empty";
        return;
    }

    if (ptr != NULL)
    {
        inorder(ptr->left);
        cout<<ptr->data<<"  ";

        inorder(ptr->right);
    }
}

/* Postorder Traversal */

void BST::postorder(node *ptr)
{
    if (root == NULL)
    {
        cout<<"\n\n\tTree is empty";
        return;
    }

    if (ptr != NULL)
    {
        postorder(ptr->left);
        postorder(ptr->right);
        cout<<ptr->data<<"  ";
    }
}

/* Display Tree Structure */
void BST::display(node *ptr, int level)
{
    int i;

    if (ptr != NULL)
    {
        display(ptr->right, level+1);

        if (ptr == root)
            cout<<"\n\n\tRoot->:  ";
        else
        {
            for (i = 0;i < level;i++)
                cout<<"  ";
		}
        cout<<ptr->data;
        display(ptr->left, level+1);
    }
}